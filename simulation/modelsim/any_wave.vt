// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/27/2025 04:52:16"
                                                                                
// Verilog Test Bench template for design : any_wave
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module any_wave_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg clk;
reg key1;
reg key2;
reg key3;
reg rst_n;
// wires                                               
wire [7:0]  dout;

// assign statements (if any)                          
any_wave i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dout(dout),
	.key1(key1),
	.key2(key2),
	.key3(key3),
	.rst_n(rst_n)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
clk = 1'b0;
rst_n = 1'b0;
key1 = 1'b0;
key2 = 1'b0;
key3 = 1'b0;
#100 rst_n = 1'b1;                                                     
// --> end                                             
$display("Running testbench");                       
end                                                    
always#10 clk = ~clk;
always#400000 key1 = ~key1;
always#100000 key3 = ~key3;
always#200000 key2 = ~key2;
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
// begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                     
// @eachvec;                                              
// --> end                                             
// end                                                    
endmodule

